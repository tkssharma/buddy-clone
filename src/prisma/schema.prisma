
generator client {
  provider = "prisma-client-js"
}
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
enum UserRole {
  ADMIN
  USER
}

enum RequestStatus {
  APPROVED
  PENDING
  REJECTED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  projects              Projects[]
  requests              ColloberationRequests []
  comments              Comments []

  isTwoFactorEnabled    Boolean                @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Projects {
  id                String  @id @default(cuid())
  userId            String
  name              String
  description          String
  type String
  colloberationRequests              ColloberationRequests []
  comments              Comments []


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ColloberationRequests {
  id                String  @id @default(cuid())
  userId            String
  projectId         String
  status          RequestStatus
  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Comments {
  id                String  @id @default(cuid())
  userId            String
  commentText        String
  parentId          String?
  projectId         String
  status          RequestStatus
  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}